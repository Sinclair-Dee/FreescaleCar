///********************************智能车程序**************************************///
//                                                                                  //
//                                                                                  //
//                                                                                  //
//                                                                                  //
//                                                                                  //
//                                                                                  // 
//                                                                                  //
///********************************************************************************///

/****************************************START***************************************/

#include "common.h"
#include "include.h"
/**************************************舵机*******************************************/
#define steer_left    1000	  //左极限
#define steer_right   1550	  //右极限
#define steer_center  1265        //舵机中点

#define Middle_point 74

#define Select_line  60         //选定前瞻


#define FAZHI_shizhi 15
#define FAZHI_zhidao 4
#define zhidao 1
#define left  2
#define right  3
u32 angle;                      //角度
u8 Cnt_shizhi=0;
u8 Cnt_tend=10;
u8 flag_shizhi=0;
u8 flag_jiwan =0;
u8 flag_zhipao=0;
u8 flag_nochange=0;
u8 flag_loselineL=0;
u8 flag_loselineR=0;

float errorPRE;
float errorLAST;
float errorNOW;
float errorAVE;
float Kp=8.25;
float Kd=2.5;
u8 fangxiang=0;
u8 tend=0;
u8 end_rowC=0;
u8 end_rowL=45;
u8 end_rowR=45;
s8 aa1=0;
s8 aa2=0;
s8 aa3=0;
      
u8  tiaodian_z=130;
u8  tiaodian_y=130;
u8  guaidian=130;
/***********************************end***************************************/



/**********************************电机****************************************/
#define  Speed_FAZHI   600

#define wandao_OTHERS 1           //其他的弯道
#define On_straight   2           //直道
#define	In_straight   3           //弯内直道 
#define wandao_BAG    4           //大弯 
#define zhidao_wandao 5           //直入弯
#define wandao_zhidao 6           //弯入直道
#define wandao_xiaoS  7           //小S
#define Speedmax0     3000       

u8    Con_road;
u8    flag_stop=0;
u8    flog_zhipao=0;
u8    cnt_stop=0;
int Speed_zhidao ;
int Speed_wandao;
int Speed_jizhuanwan;
int Speed_stop=0; 
float KI=2.5;
float KP=1.0;
float KD=0.5;
int Speedmax=3000;
int Speedmin=200;
int Set_speed=2000;
int Sur_speed;
int Set_speed0=2000;
int PREerror;
int LASTerror;
int NOWerror;
int Speed_out;
int V_add;
u32   k;
int cesu;
u16 count;
u32 PWM_out;

/***********************************end****************************************/



/*************************************摄像头******************************************/

u8  nrf_buff[CAMERA_SIZE + MAX_ONCE_TX_NUM];     //预多
u8 *img_bin_buff = (u8 *)(((u8 *)&nrf_buff) + COM_LEN);  //二值化图像的buf指针，由于开头有 COM_LEN 个字节是留给校验，所以需要加 COM_LEN
u8 img_buff[120][160];
u8 i=0,j=0;
u8 mid[121],row_left[121],row_right[121];
u8 loseline[121];
u8 a,b;
u32 sum=1000;
u8 zhipao[240]={ 
 0x23, 0x71, 
 0x23, 0x71, 
 0x23, 0x71,
 0x24, 0x71,
 0x24, 0x70,
 0x24, 0x70,
 0x24, 0x70,
 0x25, 0x70,
 0x25, 0x6F,
 0x25, 0x6F,
 0x25, 0x6F,
 0x26, 0x6E,
 0x26, 0x6E,
 0x26, 0x6E, 
 0x27, 0x6E, 
 0x27, 0x6D, 
 0x27, 0x6D, 
 0x27, 0x6D, 
 0x28, 0x6D, 
 0x28, 0x6C, 
 0x28, 0x6C, 
 0x28, 0x6C, 
 0x29, 0x6B, 
 0x29, 0x6B, 
 0x29, 0x6B, 
 0x29, 0x6B, 
 0x2A, 0x6A, 
 0x2A, 0x6A, 
 0x2A, 0x6A, 
 0x2B, 0x69, 
 0x2B, 0x69, 
 0x2B, 0x69, 
 0x2B, 0x69,
 0x2C, 0x68, 
 0x2C, 0x68, 
 0x2C, 0x68, 
 0x2D, 0x67, 
 0x2D, 0x67, 
 0x2D, 0x67, 
 0x2D, 0x67, 
 0x2E, 0x66, 
 0x2E, 0x66, 
 0x2E, 0x66, 
 0x2F, 0x65, 
 0x2F, 0x65, 
 0x2F, 0x65, 
 0x30, 0x65, 
 0x30, 0x64, 
 0x30, 0x64, 
 0x31, 0x64, 
 0x31, 0x63, 
 0x31, 0x63, 
 0x31, 0x63, 
 0x32, 0x62, 
 0x32, 0x62, 
 0x32, 0x62, 
 0x33, 0x61, 
 0x33, 0x61, 
 0x33, 0x61, 
 0x34, 0x61, 
 0x34, 0x60, 
 0x34, 0x60, 
 0x34, 0x60, 
 0x35, 0x5F, 
 0x35, 0x5F, 
 0x35, 0x5F, 
 0x36, 0x5E, 
 0x36, 0x5E, 
 0x36, 0x5E, 
 0x37, 0x5D, 
 0x37, 0x5D, 
 0x37, 0x5D, 
 0x38, 0x5C, 
 0x38, 0x5C, 
 0x39, 0x5C, 
 0x39, 0x5B, 
 0x39, 0x5B, 
 0x3A, 0x5B, 
 0x3A, 0x5A, 
 0x3A, 0x5A, 
 0x3B, 0x5A, 
 0x3B, 0x59, 
 0x3B, 0x59, 
 0x3C, 0x59, 
 0x3C, 0x58, 
 0x3C, 0x58, 
 0x3D, 0x58, 
 0x3D, 0x57, 
 0x3D, 0x57, 
 0x3E, 0x57, 
 0x3E, 0x56, 
 0x3E, 0x56, 
 0x3F, 0x89, 
 0x56, 0x89, 
 0x56, 0x88, 
 0x55, 0x88, 
 0x55, 0x88, 
 0x55, 0x87, 
 0x55, 0x87, 
 0x55, 0x87, 
 0x55, 0x98, 
 0x55, 0x95, 
 0x55, 0x93, 
 0x55, 0x90, 
 0x55, 0x8D, 
 0x55, 0x8A, 
 0x55, 0x88, 
 0x55, 0x85, 
 0x55, 0x82, 
 0x55, 0x7F, 
 0x06, 0x7C, 
 0x0A, 0x78, 
 0x10, 0x74, 
 0x3B, 0x6F, 
 0x3B, 0x69, 
 0x2E, 0x61, 
 0x36, 0x4D, 
 0x39, 0x61, 
 0x39, 0x62,
 0x00, 0x00
};

/**************************************end********************************************/
/*********************************最小二乘法拟合*************************************/
#define nihestart 35
u8 Cnt_nihe=10;
u8 nihe_i=0;
u8 chazhi0=0;
u8 chazhi1=0;
u8  nihe_fenjie;
//整场 
s32     X;
s32     Y;
s32     XY;
s32     XX;
float   X_AVE=0.0;
float   Y_AVE=0.0;
float   XY_AVE=0.0;
float   XX_AVE=0.0;
float   CK=0.0;
float   CB=0.0;
float   Nihe_panduan=0.0;

//近处
s32     X1;
s32     Y1;
s32     XY1;
s32     XX1;
float   X_AVE1=0.0;
float   Y_AVE1=0.0;
float   XY_AVE1=0.0;
float   XX_AVE1=0.0;
float   CK1=0.0;
float   CB1=0.0;

//远处
s32     X2;
s32     Y2;
s32     XY2;
s32     XX2;
float   X_AVE2=0.0;
float   Y_AVE2=0.0;
float   XY_AVE2=0.0;
float   XX_AVE2=0.0;
float   CK2=0.0;
float   CB2=0.0;
void switch_init(void)
{
    u8 k1,k2,k3,k4;u8 a;
    gpio_init (PORTC, 0, GPI_UP, 0);
    gpio_init (PORTC, 1 , GPI_UP, 0);
    gpio_init (PORTC, 2, GPI_UP, 0);
    gpio_init (PORTC, 3, GPI_UP, 0);
    
    k1=gpio_get(PORTC,1);
    k2=gpio_get(PORTC,3); 
    k3=gpio_get(PORTC,2); 
    k4=gpio_get(PORTC,0);
    a=k1*8+k2*4+k3*2+k4*1;
    switch(a)
    {
        case 0: Speedmax=2000;break; 
        case 1: Speedmax=2100;break; 
        case 2: Speedmax=2200;break;
        case 3: Speedmax=2300;break;
        case 4: Speedmax=2400;break;
        case 5: Speedmax=2500;break;
        case 6: Speedmax=2600;break;
        case 7: Speedmax=2700;break;
        case 8: Speedmax=2800;break;
        case 9: Speedmax=2900;break;
        case 10: Speedmax=3000;break;
    }
}


/**************************************end********************************************/
extern volatile u32 LPT_INT_COUNT; int cesu; u16 count;
extern volatile u8 pit_flag;

void main(void)
{   switch_init();
   // time_delay_ms(1000);
    //time_delay_ms(1000);
  //全局变量初始化
    mid[120]=74;
    row_left[120]=0;
    row_right[120]=148;
    errorPRE= 0.0;
    errorLAST=0.0;
    errorAVE= 0.0;
    errorNOW= 0.0;
    angle=steer_center;
    PREerror=0.0;  
    LASTerror=0.0;
    NOWerror=0.0;
    V_add=0.0;
    Speed_out=Speed_zhidao;
  //end  
    uart_init (UART1, 128000);
    Ov7725_Init(img_bin_buff);          	    //摄像头初始化
    
    gpio_init(PORTD,5,GPO,0);             //配置电机
    FTM_PWM_init(FTM0,CH4,10000,2000);    
    FTM_PWM_init(FTM1,CH0,100,1265); 
    //time_delay_ms(1000);
    while(1)
    {

/************************图像处理**********************************************/    
        
        ov7725_get_img();                           //采集
        lptmr_counter_init(LPT0_ALT2,100,0,LPT_Rising);    //测速
        pit_init_ms(PIT0,10);
        img_extract((u8 *)img_buff,(u8 *)img_bin_buff,2400);      
        
  
        for(i=119;i>0;i--)                         // 图像处理，提取中心线
        {
          for(j=mid[i+1];j>0;j--)
          {
            if(img_buff[i][j]==0&&img_buff[i][j-1]==0&&img_buff[i][j+1]==255)
            {    row_left[i]=j;
                 break;
            }
          }
          if(j==0) 
              {
              row_left[i]=row_left[i+1];
              flag_loselineL=1;
              }
          else
              flag_loselineL=0;
                  
          for(j=mid[i+1];j<159;j++)
          {
            if(img_buff[i][j]==0&&img_buff[i][j+1]==0&&img_buff[i][j-1]==255)
            {
              row_right[i]=j;
              break;
            }
          }
          if(j==159) 
               {
                 row_right[i]=row_right[i+1];
                 flag_loselineR=1;
               }
          else
                 flag_loselineR=0;
          
          if(flag_loselineR==1&&flag_loselineL==1)
              loseline[i]=1;
          else
              loseline[i]=0;
        
            

        }  

      
        
        
 
       end_rowL=0; 
       end_rowC=0;
       end_rowR=0;
       for(i=119;i>0;i--)                        //左
           {
           if(img_buff[i][zhipao[238-2*i]]==0)
               { end_rowL=i;
                  break;
               }
           }  
       
        for(i=119;i>0;i--)                        //中
           {
           if(img_buff[i][74]==0)
               { end_rowC=i;
                  break;
               }
           } 
       
       for(i=119;i>0;i--)                        //右
           {
           if(img_buff[i][zhipao[239-2*i]]==0)
               { end_rowR=i;
                  break;
               }
           } 
       
     
      
   
    // errorAVE=end_rowC    //计算偏差
     
     errorPRE= errorLAST;
     errorLAST=errorNOW;
     if(end_rowR<end_rowL)
         errorNOW =(float)(end_rowC-40);
     else
         errorNOW =(float)(0-end_rowC+40);
           
     




       
 /************************************判断路况************************************************/ 
  flag_zhipao=0;
  if(end_rowC<=30&&end_rowL<=25&&end_rowC<=25)
  {Set_speed=(int)Speedmax;flag_zhipao=1;}
  else
     if(end_rowC<=40&&end_rowL<=35&&end_rowC<=35)
      { Set_speed=(int)(0.80*Speedmax);flag_zhipao=1;}
     else
       if(end_rowC<=50&&end_rowL<=40&&end_rowC<=40)
          { Set_speed=(int)(0.70*Speedmax);flag_zhipao=1;}
       else
           {  Set_speed=(int)(0.70*Speedmax-4*end_rowC);flag_zhipao=0;}
    
    
/**************************************end**********************************************/ 
  for(i=40;i<=80;i++)               //判定十字弯
       if(loseline[i]==1)
         Cnt_shizhi++;
    
      
    if(Cnt_shizhi>=FAZHI_shizhi&&end_rowC<=60)                   
          flag_shizhi=1;
       else
          flag_shizhi=0;


/**************************************起跑线及减速********************************************/
  cnt_stop=0;
   //if(((end_rowL>=115||end_rowR>=115)&&end_rowC<=45)||cnt_stop>=145||end_rowC>=115) //判定起跑线或紧急停车
   //  break;
   if(end_rowC>=96||end_rowR>=96||end_rowL>=96)
       Set_speed=(int)(0.45*Speedmax);
   if(end_rowC>=100&&end_rowR>=100&&end_rowL>=100)
       Set_speed=Speedmin+100;
    
  
/****************************************end*********************************************/ 

/**************************************速度PID********************************************/
    Sur_speed=cesu;                          //实际速度  
    Sur_speed=(int)(26*Sur_speed+220) ;      //单位转换，b可能为零
    PREerror=LASTerror;                      //计算速度偏差
    LASTerror=NOWerror;
    NOWerror=Set_speed-Sur_speed;         
    
    if(Set_speed-Sur_speed>=Speed_FAZHI)
	 Speed_out=Speedmax0-250;
    else
         if(Sur_speed-Set_speed>=Speed_FAZHI)
	      Speed_out=Speedmin;
         else
	     {
	      V_add=(int)(KP*(NOWerror-LASTerror)+KI*NOWerror+KD*(NOWerror+PREerror-2*LASTerror));

                          Speed_out=Speed_out+V_add;
	      }
    
    if(Speed_out<Speedmin)   Speed_out=Speedmin; //电机限幅
    if(Speed_out>Speedmax0)   Speed_out=Speedmax0;
    PWM_out=(u32)Speed_out;
/**************************************速度PIDend****************************************/  
  

    
    
/**************************************转角PID************************************************/ 
       if(flag_shizhi||flag_zhipao)
          angle=steer_center;    
       else
            if(end_rowL>end_rowC&&end_rowR>end_rowC)               //舵机控制
                angle=angle;
            else
                angle= (u32 )( angle  +Kp*(errorNOW-errorLAST)+Kd*(errorNOW-2*errorLAST+ errorPRE) );  //增量式
                //angle=(u32 )(steer_center+Kp*errorNOW+Kd*(errorNOW - errorLAST));                        //位置式
        
                  
       if(angle>1550)  angle=1550;           //舵机限幅
       if(angle<1000)  angle=1000;  
/**************************************转角PIDend**********************************************/                       

    FTM_PWM_Duty(FTM0,CH4,PWM_out);
    FTM_PWM_Duty(FTM1,CH0,angle);
       
    

  } 


/******************************************************/  
k=60000;
while(k--)
  {
   gpio_init(PORTD,4,GPO,0);             //反配置电机
   FTM_PWM_init(FTM0,CH5,10000,2000); 
  }
gpio_init(PORTD,4,GPO,0);               //置0电机
FTM_PWM_init(FTM0,CH5,10000,0); 
/*****************************************************/
}


/****************************************END************************************************/
